"""AWS Bedrock functions"""

import json
import boto3
from botocore.exceptions import BotoCoreError, ClientError

bedrock_agent_runtime_client = boto3.client(
    'bedrock-runtime'
)

def invoke_agent_helper(query, session_id, agent_id, alias_id, session_state=None):
    """ Invokes an Amazon Bedrock Agent and returns the response. It allows you to
    send a user query to a specific agent and alias, maintaining conversation
    context across multiple turns using the session ID.

    Args:
        query (str): The user query or input message to send to the agent.
        session_id (str): Unique identifier for the conversation session.
        agent_id (str): The ID of the Bedrock Agent to invoke.
        alias_id (str): The alias ID associated with the agent.
        session_state (dict, optional): Previous session state to maintain context. Defaults to None.

    Returns:
        str: The final answer generated by the agent.
    """
    
    end_session: bool = False
    
    if not session_state:
        session_state = {}

    # invoke the agent API
    agent_response = bedrock_agent_runtime_client.invoke_agent(
        inputText=query,
        agentId=agent_id,
        agentAliasId=alias_id,
        sessionId=session_id,
        enableTrace=True,
        endSession=end_session,
        sessionState=session_state
    )

    print(agent_response)

    event_stream = agent_response['completion']
    try:
        for event in event_stream:
            if 'chunk' in event:
                data = event['chunk']['bytes']
                print(f"Final answer ->\n{data.decode('utf8')}")
                agent_answer = data.decode('utf8')
                return agent_answer
                
            elif 'trace' in event:
                print(json.dumps(event['trace'], indent=2, default=str))
            else:
                raise Exception("unexpected event.", event)
    except Exception as e:
        print("unexpected event.", event_stream)
        